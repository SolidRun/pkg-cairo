<?xml version='1.0' encoding='UTF-8'?> 
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="cairo-Patterns">
<refmeta>
<refentrytitle id="top_of_page">Patterns</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>CAIRO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Patterns</refname>
<refpurpose>Gradients and filtered sources</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="synopsis">
<title id="synopsis.title">Synopsis</title>

<synopsis>



typedef     <link linkend="cairo-pattern-t">cairo_pattern_t</link>;
<link linkend="void">void</link>        <link linkend="cairo-pattern-add-color-stop-rgb">cairo_pattern_add_color_stop_rgb</link>
                                            (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern,
                                             <link linkend="double">double</link> offset,
                                             <link linkend="double">double</link> red,
                                             <link linkend="double">double</link> green,
                                             <link linkend="double">double</link> blue);
<link linkend="void">void</link>        <link linkend="cairo-pattern-add-color-stop-rgba">cairo_pattern_add_color_stop_rgba</link>
                                            (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern,
                                             <link linkend="double">double</link> offset,
                                             <link linkend="double">double</link> red,
                                             <link linkend="double">double</link> green,
                                             <link linkend="double">double</link> blue,
                                             <link linkend="double">double</link> alpha);
<link linkend="cairo-pattern-t">cairo_pattern_t</link>* <link linkend="cairo-pattern-create-rgb">cairo_pattern_create_rgb</link>   (<link linkend="double">double</link> red,
                                             <link linkend="double">double</link> green,
                                             <link linkend="double">double</link> blue);
<link linkend="cairo-pattern-t">cairo_pattern_t</link>* <link linkend="cairo-pattern-create-rgba">cairo_pattern_create_rgba</link>  (<link linkend="double">double</link> red,
                                             <link linkend="double">double</link> green,
                                             <link linkend="double">double</link> blue,
                                             <link linkend="double">double</link> alpha);
<link linkend="cairo-pattern-t">cairo_pattern_t</link>* <link linkend="cairo-pattern-create-for-surface">cairo_pattern_create_for_surface</link>
                                            (<link linkend="cairo-surface-t">cairo_surface_t</link> *surface);
<link linkend="cairo-pattern-t">cairo_pattern_t</link>* <link linkend="cairo-pattern-create-linear">cairo_pattern_create_linear</link>
                                            (<link linkend="double">double</link> x0,
                                             <link linkend="double">double</link> y0,
                                             <link linkend="double">double</link> x1,
                                             <link linkend="double">double</link> y1);
<link linkend="cairo-pattern-t">cairo_pattern_t</link>* <link linkend="cairo-pattern-create-radial">cairo_pattern_create_radial</link>
                                            (<link linkend="double">double</link> cx0,
                                             <link linkend="double">double</link> cy0,
                                             <link linkend="double">double</link> radius0,
                                             <link linkend="double">double</link> cx1,
                                             <link linkend="double">double</link> cy1,
                                             <link linkend="double">double</link> radius1);
<link linkend="void">void</link>        <link linkend="cairo-pattern-destroy">cairo_pattern_destroy</link>           (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern);
<link linkend="cairo-pattern-t">cairo_pattern_t</link>* <link linkend="cairo-pattern-reference">cairo_pattern_reference</link>    (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern);
<link linkend="cairo-status-t">cairo_status_t</link> <link linkend="cairo-pattern-status">cairo_pattern_status</link>         (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern);
enum        <link linkend="cairo-extend-t">cairo_extend_t</link>;
<link linkend="void">void</link>        <link linkend="cairo-pattern-set-extend">cairo_pattern_set_extend</link>        (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern,
                                             <link linkend="cairo-extend-t">cairo_extend_t</link> extend);
<link linkend="cairo-extend-t">cairo_extend_t</link> <link linkend="cairo-pattern-get-extend">cairo_pattern_get_extend</link>     (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern);
enum        <link linkend="cairo-filter-t">cairo_filter_t</link>;
<link linkend="void">void</link>        <link linkend="cairo-pattern-set-filter">cairo_pattern_set_filter</link>        (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern,
                                             <link linkend="cairo-filter-t">cairo_filter_t</link> filter);
<link linkend="cairo-filter-t">cairo_filter_t</link> <link linkend="cairo-pattern-get-filter">cairo_pattern_get_filter</link>     (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern);
<link linkend="void">void</link>        <link linkend="cairo-pattern-set-matrix">cairo_pattern_set_matrix</link>        (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern,
                                             const <link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix);
<link linkend="void">void</link>        <link linkend="cairo-pattern-get-matrix">cairo_pattern_get_matrix</link>        (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern,
                                             <link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix);
enum        <link linkend="cairo-pattern-type-t">cairo_pattern_type_t</link>;
<link linkend="cairo-pattern-type-t">cairo_pattern_type_t</link> <link linkend="cairo-pattern-get-type">cairo_pattern_get_type</link> (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern);
</synopsis>
</refsynopsisdiv>









<refsect1 id="desc">
<title id="desc.title">Description</title>
<para>

</para>
</refsect1>

<refsect1 id="details">
<title id="details.title">Details</title>
<refsect2>
<title><anchor id="cairo-pattern-t" role="typedef"/>cairo_pattern_t</title>
<indexterm><primary>cairo_pattern_t</primary></indexterm><programlisting>typedef struct _cairo_pattern cairo_pattern_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cairo-pattern-add-color-stop-rgb" role="function"/>cairo_pattern_add_color_stop_rgb ()</title>
<indexterm><primary>cairo_pattern_add_color_stop_rgb</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_pattern_add_color_stop_rgb
                                            (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern,
                                             <link linkend="double">double</link> offset,
                                             <link linkend="double">double</link> red,
                                             <link linkend="double">double</link> green,
                                             <link linkend="double">double</link> blue);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-pattern-add-color-stop-rgba" role="function"/>cairo_pattern_add_color_stop_rgba ()</title>
<indexterm><primary>cairo_pattern_add_color_stop_rgba</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_pattern_add_color_stop_rgba
                                            (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern,
                                             <link linkend="double">double</link> offset,
                                             <link linkend="double">double</link> red,
                                             <link linkend="double">double</link> green,
                                             <link linkend="double">double</link> blue,
                                             <link linkend="double">double</link> alpha);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-pattern-create-rgb" role="function"/>cairo_pattern_create_rgb ()</title>
<indexterm><primary>cairo_pattern_create_rgb</primary></indexterm><programlisting><link linkend="cairo-pattern-t">cairo_pattern_t</link>* cairo_pattern_create_rgb   (<link linkend="double">double</link> red,
                                             <link linkend="double">double</link> green,
                                             <link linkend="double">double</link> blue);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-pattern-create-rgba" role="function"/>cairo_pattern_create_rgba ()</title>
<indexterm><primary>cairo_pattern_create_rgba</primary></indexterm><programlisting><link linkend="cairo-pattern-t">cairo_pattern_t</link>* cairo_pattern_create_rgba  (<link linkend="double">double</link> red,
                                             <link linkend="double">double</link> green,
                                             <link linkend="double">double</link> blue,
                                             <link linkend="double">double</link> alpha);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-pattern-create-for-surface" role="function"/>cairo_pattern_create_for_surface ()</title>
<indexterm><primary>cairo_pattern_create_for_surface</primary></indexterm><programlisting><link linkend="cairo-pattern-t">cairo_pattern_t</link>* cairo_pattern_create_for_surface
                                            (<link linkend="cairo-surface-t">cairo_surface_t</link> *surface);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-pattern-create-linear" role="function"/>cairo_pattern_create_linear ()</title>
<indexterm><primary>cairo_pattern_create_linear</primary></indexterm><programlisting><link linkend="cairo-pattern-t">cairo_pattern_t</link>* cairo_pattern_create_linear
                                            (<link linkend="double">double</link> x0,
                                             <link linkend="double">double</link> y0,
                                             <link linkend="double">double</link> x1,
                                             <link linkend="double">double</link> y1);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-pattern-create-radial" role="function"/>cairo_pattern_create_radial ()</title>
<indexterm><primary>cairo_pattern_create_radial</primary></indexterm><programlisting><link linkend="cairo-pattern-t">cairo_pattern_t</link>* cairo_pattern_create_radial
                                            (<link linkend="double">double</link> cx0,
                                             <link linkend="double">double</link> cy0,
                                             <link linkend="double">double</link> radius0,
                                             <link linkend="double">double</link> cx1,
                                             <link linkend="double">double</link> cy1,
                                             <link linkend="double">double</link> radius1);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-pattern-destroy" role="function"/>cairo_pattern_destroy ()</title>
<indexterm><primary>cairo_pattern_destroy</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_pattern_destroy           (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-pattern-reference" role="function"/>cairo_pattern_reference ()</title>
<indexterm><primary>cairo_pattern_reference</primary></indexterm><programlisting><link linkend="cairo-pattern-t">cairo_pattern_t</link>* cairo_pattern_reference    (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-pattern-status" role="function"/>cairo_pattern_status ()</title>
<indexterm><primary>cairo_pattern_status</primary></indexterm><programlisting><link linkend="cairo-status-t">cairo_status_t</link> cairo_pattern_status         (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-extend-t" role="enum"/>enum cairo_extend_t</title>
<indexterm><primary>cairo_extend_t</primary></indexterm><programlisting>typedef enum _cairo_extend {
    CAIRO_EXTEND_NONE,
    CAIRO_EXTEND_REPEAT,
    CAIRO_EXTEND_REFLECT,
    CAIRO_EXTEND_PAD
} cairo_extend_t;
</programlisting>
<para>
<link linkend="cairo-extend-t"><type>cairo_extend_t</type></link> is used to describe how the area outside
of a pattern will be drawn.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="CAIRO-EXTEND-NONE:CAPS" role="constant"/><literal>CAIRO_EXTEND_NONE</literal></term>
<listitem><simpara> pixels outside of the source pattern
  are fully transparent
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="CAIRO-EXTEND-REPEAT:CAPS" role="constant"/><literal>CAIRO_EXTEND_REPEAT</literal></term>
<listitem><simpara> the pattern is tiled by repeating
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="CAIRO-EXTEND-REFLECT:CAPS" role="constant"/><literal>CAIRO_EXTEND_REFLECT</literal></term>
<listitem><simpara> the pattern is tiled by reflecting
  at the edges (not implemented for surface patterns currently)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="CAIRO-EXTEND-PAD:CAPS" role="constant"/><literal>CAIRO_EXTEND_PAD</literal></term>
<listitem><simpara> pixels outside of the pattern copy
  the closest pixel from the source (Since 1.2; not implemented
  for surface patterns currently)
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-pattern-set-extend" role="function"/>cairo_pattern_set_extend ()</title>
<indexterm><primary>cairo_pattern_set_extend</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_pattern_set_extend        (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern,
                                             <link linkend="cairo-extend-t">cairo_extend_t</link> extend);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-pattern-get-extend" role="function"/>cairo_pattern_get_extend ()</title>
<indexterm><primary>cairo_pattern_get_extend</primary></indexterm><programlisting><link linkend="cairo-extend-t">cairo_extend_t</link> cairo_pattern_get_extend     (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-filter-t" role="enum"/>enum cairo_filter_t</title>
<indexterm><primary>cairo_filter_t</primary></indexterm><programlisting>typedef enum _cairo_filter {
    CAIRO_FILTER_FAST,
    CAIRO_FILTER_GOOD,
    CAIRO_FILTER_BEST,
    CAIRO_FILTER_NEAREST,
    CAIRO_FILTER_BILINEAR,
    CAIRO_FILTER_GAUSSIAN
} cairo_filter_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cairo-pattern-set-filter" role="function"/>cairo_pattern_set_filter ()</title>
<indexterm><primary>cairo_pattern_set_filter</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_pattern_set_filter        (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern,
                                             <link linkend="cairo-filter-t">cairo_filter_t</link> filter);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-pattern-get-filter" role="function"/>cairo_pattern_get_filter ()</title>
<indexterm><primary>cairo_pattern_get_filter</primary></indexterm><programlisting><link linkend="cairo-filter-t">cairo_filter_t</link> cairo_pattern_get_filter     (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-pattern-set-matrix" role="function"/>cairo_pattern_set_matrix ()</title>
<indexterm><primary>cairo_pattern_set_matrix</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_pattern_set_matrix        (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern,
                                             const <link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-pattern-get-matrix" role="function"/>cairo_pattern_get_matrix ()</title>
<indexterm><primary>cairo_pattern_get_matrix</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_pattern_get_matrix        (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern,
                                             <link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix);</programlisting>
</refsect2>
<refsect2>
<title><anchor id="cairo-pattern-type-t" role="enum" condition="since:1.2"/>enum cairo_pattern_type_t</title>
<indexterm role="1.2"><primary>cairo_pattern_type_t</primary></indexterm><programlisting>typedef enum _cairo_pattern_type {
    CAIRO_PATTERN_TYPE_SOLID,
    CAIRO_PATTERN_TYPE_SURFACE,
    CAIRO_PATTERN_TYPE_LINEAR,
    CAIRO_PATTERN_TYPE_RADIAL
} cairo_pattern_type_t;
</programlisting>
<para>Since  1.2
</para></refsect2>
<refsect2>
<title><anchor id="cairo-pattern-get-type" role="function" condition="since:1.2"/>cairo_pattern_get_type ()</title>
<indexterm role="1.2"><primary>cairo_pattern_get_type</primary></indexterm><programlisting><link linkend="cairo-pattern-type-t">cairo_pattern_type_t</link> cairo_pattern_get_type (<link linkend="cairo-pattern-t">cairo_pattern_t</link> *pattern);</programlisting>
<para>Since  1.2
</para></refsect2>

</refsect1>




</refentry>
